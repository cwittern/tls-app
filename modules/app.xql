xquery version "3.1";

module namespace app="http://hxwd.org/app";

declare namespace tei= "http://www.tei-c.org/ns/1.0";
declare namespace tls="http://hxwd.org/ns/1.0";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://hxwd.org/config" at "config.xqm";
import module namespace kwic="http://exist-db.org/xquery/kwic"
    at "resource:org/exist/xquery/lib/kwic.xql";
import module namespace tlslib="http://hxwd.org/lib" at "tlslib.xql";

declare variable $app:SESSION := "tls:results";

declare variable $app:lmap := map{
"zh" : "Modern Chinese",
"och" : "Old Chinese",
"syn-func" : "Syntactic Functions",
"sem-feat" : "Semantic Features",
"word" : "Words",
"char" : "Chars",
"concept" : "Concepts",
"definition" : "Definition",
"notes" : "Notes",
"old-chinese-criteria" : "Old Chinese Criteria",
"modern-chinese-criteria" : "Modern Chinese Criteria",
"taxonymy" : "Taxonoymy",
"antonymy" : "Antonymy",
"see" : "See also",
"source-references" : "Bibliography",
"warring-states-currency" : "Warring States Currency",
"register" : "Register",
"words" : "Words",
"none" : "Texts or Translation",
"old-chinese-contrasts" : "Old Chinese Contrasts",
"pointers" : "Pointers",
"huang-jingui" : "黄金貴：古漢語同義詞辨釋詞典",
"KR1" : "經部",
"KR2" : "史部",
"KR3" : "子部",
"KR4" : "集部",
"KR5" : "道部",
"KR6" : "佛部",
"CH1" : "先秦兩漢",
"CH2" : "魏晉南北朝",
"CH7" : "類書",
"CH8" : "竹簡帛書"
};

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

(: start here :)
(:~
 : Get app logo. Value passed from repo-config.xml  
:)
declare
    %templates:wrap
function app:logo($node as node(), $model as map(*)) {
    if($config:get-config//repo:logo != '') then
        <img class="app-logo img-fluid" src="resources/images/{$config:get-config//repo:logo/text() }" title="{$config:app-title}"/>
    else ()
};

declare
    %templates:wrap
function app:doc($node as node(), $model as map(*), $section as xs:string) {
switch($section)
 case "overview" return doc(concat($config:app-root, "/documentation/overview.html"))
 default return (<h1>About the TLS project</h1>,
        <p>Under construction</p>)
};


declare function app:tls-summary($node as node(), $model as map(*)) {
(:let $tlsroot := $config:tls-data-root :)
<div>
{let $tlsroot := $config:tls-data-root
return
<p>
Dummy template {local-name($node), string($node), string($tlsroot), count(collection($tlsroot)//*:head)}
<table>
{for $a in collection($tlsroot)//tei:head
group by $key := $a/ancestor::tei:div/@type
order by $key
return
  <tr>
  <td>Key: {data($key)}</td>
  <td>Count: {count($a)}</td>
</tr>
}
</table>
</p>}
</div>
};

(: browse :)

declare 
    %templates:wrap
function app:browse($node as node()*, $model as map(*), $type as xs:string?, $filter as xs:string?)
{
    session:create(),
    let $filterString := if (string-length($filter) > 0) then $filter else ""
    return
    if ($type = "word") then app:browse-word($type, $filterString)
    else if ($type = "taxchar") then app:browse-char($type, $filterString)
    else if (("concept", "syn-func", "sem-feat") = $type) then    
    let $hits :=  app:do-browse($type, $filterString)      
    let $store := session:set-attribute("tls-browse", $hits)
    return
   <div class="card">
    <div class="card-header" id="{$type}-card">
      <div class="row mb-0">
      <span class="col-3"><h4>{map:get($app:lmap, $type)}</h4></span>&#160;
      <span class="col-3">
      <input class="form-control" id="myInput" type="text" placeholder="Type to filter..."/>
      </span>
      </div>
    </div>
    <div class="card-body"><table class="table">
    <thead><tr>
    <th scope="col">Abbreviation</th>
    <th scope="col">Definition</th>
    <th scope="col">Remarks</th>    
    </tr></thead><tbody class="table-striped">{
    for $h in $hits
    let $n := $h/tei:head/text()
    ,$id := $h/@xml:id
    ,$def := $h/tei:p
    order by $n
    return
    (
    <tr id="{$id}" class="abbr">
    <td>{
    switch ($type) 
        case  "concept" return <a href="concept.html?uuid={$id}">{$n}</a>
        default return <a onclick="show_use_of('{$type}', '{$id}')">{$n}</a>
    }</td>
    <td>{$def}</td>
    <td><ul id="{$id}-resp"/></td>
    </tr>)
    }</tbody></table></div>
  </div>
  (: unknown type :)
  else ()  
};

(: :)
declare function app:browse-word($type as xs:string?, $filter as xs:string?)
{
    let $typeString := if (string-length($type) > 0) then $type else "word"    
    for $hit at $c in collection($config:tls-data-root)//tei:entry[@type=$type]
     let $head := $hit/tei:orth/text()
     order by $head
     where $c < 100
     return $hit
};

(: taxchar if available, otherwise look for words? :)
declare function app:browse-char($type as xs:string?, $filter as xs:string?)
{<div><h4>Analyzed characters by frequency</h4><small>1</small>
   { for $hit at $pos in collection($config:tls-data-root)//tei:div[@type=$type]
     let $head := $hit/tei:head
     ,$id := $hit/@xml:id
    return 
    (<a class="ml-2" href="char.html?id={$id}">{$head}</a>,
    if ($pos mod 30 = 0) then (<br/>,<small>{$pos}</small>) else () )
   }
</div>    
};

declare function app:do-browse($type as xs:string?, $filter as xs:string?)
{
    for $hit in collection($config:tls-data-root)//tei:div[@type=$type]
    let $head := data($hit/tei:head)
    where starts-with($head, $filter)
    order by $head
    return $hit
};



(: search related functions :)

declare 
    %templates:wrap
function app:query($node as node()*, $model as map(*), $query as xs:string?, $mode as xs:string?)
{
    session:create(),
    let $hits := if (tlslib:iskanji($query)) 
      then app:ngram-query($query, $mode) else 
      app:do-query($query, $mode)
    let $store := session:set-attribute($app:SESSION, $hits)
    return
    map:merge((
       map:entry("hits", $hits), map:entry("query", $query)))
};

declare function app:do-query($queryStr as xs:string?, $mode as xs:string?)
{
    let $dataroot := ($config:tls-data-root, $config:tls-texts-root, $config:tls-user-root),
    $query := app:create-query(lower-case($queryStr), $mode),
    $hits := for $h in collection($dataroot)//tei:div[ft:query(., $query)]
            where $h/@type != "swl" return $h,
    $types := map:merge(for $hit in $hits
        let $type := if ($hit/@type) then data($hit/@type) else "none"
        group by $type
        return map:entry($type, $hit)),
    $store := session:set-attribute($app:SESSION || ".types", $types)
    for $hit in $hits
    order by ft:score($hit) descending
    return $hit
};

declare function app:ngram-query($queryStr as xs:string?, $mode as xs:string?)
{
    let $dataroot := ($config:tls-data-root, $config:tls-texts-root, $config:tls-user-root)
    let $qs := tokenize($queryStr, "\s"),
    $matches := if  (count($qs) > 1) then 
      collection($dataroot)//tei:seg[ngram:contains(., $qs[1]) and ngram:contains(., $qs[2])]
      else
      collection($dataroot)//tei:seg[ngram:contains(., $qs[1])]
    for $hit in $matches
(:    let $id := $hit/ancestor::tei:TEI/@xml:id     
    order by $id:)
    return $hit 
};



declare
    %templates:wrap
function app:from-session($node as node()*, $model as map(*)) {
    map:entry("hits", session:get-attribute($app:SESSION))
};



declare function app:create-query($queryStr as xs:string?, $mode as xs:string?)
{
<query>
    {
    if ($mode eq 'any') then 
        for $term in tokenize($queryStr, '\s')
        return
        <term occur="should">{$term}</term>
    else if ($mode eq 'all') then
        for $term in tokenize($queryStr, '\s')
        return
        <term occur="must">{$term}</term>
    else if ($mode eq 'phrase') then
        <phrase>{$queryStr}</phrase>
    else 
        <near>{$queryStr}</near>
    }
</query>
};

declare 
%templates:default("start", 1)
function app:show-hits($node as node()*, $model as map(*), $start as xs:int)
{   let $query := map:get($model, "query")
    ,$iskanji := tlslib:iskanji($query) 
    ,$map := session:get-attribute($app:SESSION || ".types")
    ,$qs := tokenize($query, "\s")
    return
    <div><h1>Searching for <mark>{$query}</mark></h1>
    {if ($iskanji) then
    <h4>Found {count($model("hits"))} matches, showing {$start} to {$start + 10 -1}</h4>
    else
    <h4>Found {count($model("hits"))} matches</h4>}    
    {if ($iskanji) then
    <div>
    <table class="table">
    {for $h at $c in subsequence(map:get($model, "hits"), $start, 10)
      let $head := $h/ancestor::tei:div[1]/tei:head[1],
      $title := $h/ancestor::tei:TEI//tei:titleStmt/tei:title/text(),
(:      let $head :="head", $title := "title",:)
      $loc := $h/@xml:id
(:              <td>{$h/preceding-sibling::tei:seg[1], 
        substring-before($h, $query) }
        <mark>{$query}</mark> {substring-after($h, $query),
        $h/following-sibling::tei:seg[1]}</td>
:)
    return
      <tr>
        <td>{$c + $start -1}</td>
        <td><a href="textview.html?location={$loc}&amp;query={$query}">{$title, " / ", $head}</a>
        </td>
        <td>{ $h/preceding-sibling::tei:seg[1],
        if (count($qs) > 1) then $h else
        (substring-before($h, $query), 
        <mark>{$query}</mark> 
        ,substring-after($h, $query)), 
        $h/following-sibling::tei:seg[1]}</td>
        </tr>
    }
    </table>
    <nav aria-label="Page navigation">
  <ul class="pagination">
    <li class="page-item"><a class="page-link {if ($start = 1) then "disabled" else ()}" href="search.html?query={$query}&amp;start={$start - 10}">&#171;</a></li>
    <li class="page-item"><a class="page-link" href="search.html?query={$query}&amp;start={$start + 10}">&#187;</a></li>
  </ul>
</nav>
    </div>
    else
    <div>
    <ul>{
      for $t in map:keys($map)
     order by $t
      return <li><a href="#{data($t)}-link" title="{data($t)}">{map:get($app:lmap, $t)}</a>, {count(map:get($map, $t))}</li>}</ul>
    {for $t in map:keys($map)
     order by $t
     return
     <div id="{data($t)}-link"><h4>{map:get($app:lmap, $t)} <span class="badge badge-light">{count(map:get($map, $t))}</span></h4>
     <ul>{for $h at $c in map:get($map, $t) where $c < 4 
(:      let $kwic := kwic:summarize($h, <config width="40"/>, app:filter#2),:)
    let $expanded := util:expand($h, "add-exist-id=all")
    return
    for $match in subsequence($expanded//exist:match, 1, 3)
(:    let $kwic := kwic:summarize($hit, <config width="40"/>, app:filter#2):)
     let $kwic := app:get-kwic($match, <config width="40"/>, <a></a>),
      $root := $h/ancestor-or-self::tei:div[@type="concept"],
      $uplink := if ($root) then $root/@xml:id else (),
      $head := $root/tei:head/text()
      (: $h is a div element, so this does not seem to work... :)
     return
         <li>{if ($root) 
         then <strong><a href="concept.html?uuid={$uplink}#{$t}" title="{substring-after(document-uri(root($h)), $config:tls-data-root)}
">{$head}</a></strong> 
         else <strong>{substring-after(document-uri(root($h)), $config:tls-data-root)}</strong>}
         {$kwic}</li>
     }
     </ul>
     <span class="btn">Show more...</span>
     </div>
     }
    </div>
    }
    </div>
};    

declare %private function app:get-kwic($node as element(), $config as element(config), $link) {
  <tr>
    <td class="previous">...{$node/preceding::text()[fn:position() < 10]}</td>
    <td class="hi"><mark>
    {
      if ($link) then
        <a href="{$config/@link}">{$node/text()}</a>
      else
        $node/text()
    }
    </mark></td>
    <td class="following">{$node/following::text()[fn:position() < 10]}...</td>
  </tr>
};


declare 
%templates:default("start", 1)
function app:show-hits-short($node as node()*, $model as map(*),$start as xs:int)
{   <div>
    {for $hit at $p in subsequence($model("hits"), $start, 10)
(:    let $kwic := kwic:summarize($hit, <config width="40"/>, app:filter#2):)
    let $kwic := app:get-kwic($hit, <config width="40"/>, <a></a>)
    return
    <div class="tls-concept" xmlns="http://www.w3.org/1999/xhtml">
      <h3>{$hit/ancestor::tei:head/text()}</h3>
      <span class="number">{$start + $p - 1}</span>
      <span>{data($hit/@type)}</span>
      { $kwic }
    </div>
    }</div>
};    



(:

declare
    %templates:default("start", 1)
    %templates:default("length", 10)
    function app:show-hits($node as node()*, $model as map()*,$start as xs:int, $length as xs:int)
{
    for $hit at $p in subsequence($model("hits"), $start, $length)
    let $kwic := kwic:summarize($hit, <config width="40" table="yes"/>, app:filter#2)
    return
    <div class="tls-concept" xmlns="http://www.w3.org/1999/xhtml">
      <h3>{$hit/ancestor::tei:head/text()}</h3>
      <span class="number">{$start + $p - 1}</span>
      <table>{ $kwic }</table>
    </div>
};
:)
declare %private function app:filter($node as node(), $mode as xs:string?) as text()?
{
    if ($mode eq 'before') then 
    text {concat($node, ' ') }
    else 
    text {concat(' ', $node) }
};

(: temporarily added the search code here to see if the search is working at all
 this should just be count($model("hits"))
:)
declare
    %templates:wrap
function app:hit-count($node as node()*, $model as map(*), $query as xs:string?) {
   count($model("hits"))
};

(: textview related functions :)

(: function textview 
@param location  text location or text id for the text to display. If empty, display text list
@param mode      for textlist: 'tls' texts or 'chant' texts or 'all' texts
:)
declare 
    %templates:wrap
    %templates:default("prec", 15)
    %templates:default("foll", 15)     
function app:textview($node as node()*, $model as map(*), $location as xs:string?, $mode as xs:string?, $prec as xs:int?, $foll as xs:int?)
{
    let $dataroot := $config:tls-data-root
    return
    (session:create(),
    if (string-length($location) > 0) then
     if (contains($location, '_')) then
      let $textid := tokenize($location, '_')[1]
      let $firstseg := collection($config:tls-texts-root)//tei:*[@xml:id=$location]
      return
        tlslib:displaychunk($firstseg, $prec, $foll)
     else
      let $firstdiv := (collection($config:tls-texts-root)//tei:*[@xml:id=$location]//tei:body/tei:div[1])
      let $targetseg := if ($firstdiv//tei:seg) then ($firstdiv//tei:seg)[1] else $firstdiv/following::tei:seg[1]
      return
       tlslib:displaychunk($targetseg, 0, $prec + $foll)
    else 
    app:textlist()
    )
};

declare function app:textlist(){
    let $titles := map:merge(for $t in collection(concat($config:tls-texts-root, '/tls'))//tei:titleStmt/tei:title
            let $textid := data($t/ancestor::tei:TEI/@xml:id)
            return map:entry($textid, $t/text()))
    let $fv := function($k, $v){$v}
    let $bc := map:merge(for $c in map:keys($titles)
         let $bu := substring($c, 1, 3)
         group by $bu
         return map:entry($bu, count($c)))
    let $count :=  sum(map:for-each($bc, $fv)),
    $chantpath := concat($config:tls-texts-root, '/chant/'),
    $chantcount := if (xmldb:collection-available($chantpath)) then 1184 else 0,
    $starredcount := 0
    return
    <div>
    <h1>Available texts: <span class="badge badge-pill badge-light">{$count + $chantcount}</span></h1>
    <ul class="nav nav-tabs" id="textTab" role="tablist">
    <li class="nav-item"> <a class="nav-link" id="coretext-tab" role="tab" 
    href="#coretexts" data-toggle="tab">Core Texts
    <span class="badge badge-pill badge-light">{$count}</span></a></li>
    <li class="nav-item"> <a class="nav-link" id="moretext-tab" role="tab" 
    href="#moretexts" data-toggle="tab">More Texts
    <span class="badge badge-pill badge-light">{$chantcount}</span></a></li>
    <li class="nav-item"> <a class="nav-link {if (sm:is-authenticated()) then () else "disabled"}" id="starredtext-tab" role="tab" 
    href="#starredtexts" data-toggle="tab">Starred Texts
    <span class="badge badge-pill badge-light">{$starredcount}</span></a></li>
    </ul>    
    <div class="tab-content" id="textsContent">    
    <div class="tab-pane" id="coretexts" role="tabpanel">    
    <ul class="nav nav-tabs" id="buTab" role="tablist">
    {for $b in map:keys($bc)
    return 
    <li class="nav-item">
    <a class="nav-link" id="{$b}-tab" role="tab" 
    href="#{$b}" data-toggle="tab">{map:get($app:lmap, $b)}
    <span class="badge badge-pill badge-light">{map:get($bc, $b)}</span></a></li>
    }
    </ul>
    <div class="tab-content" id="buTabContent">
    {
    for $tit in map:keys($titles)
     let $b := substring($tit, 1, 3)
     group by $b    
    return
    <div class="tab-pane" id="{$b}" role="tabpanel">
    <ul class="list">
    {for $t in $tit
    order by $t
    return
    <li class="list-group-itemx">
    <a href="textview.html?location={$t}">{map:get($titles, $t)}
    { if (sm:is-authenticated()) then
    <input id="input-{$t}" name="input-name" type="number" class="rating" 
    min="1" max="10" step="2" data-theme="krajee-svg" data-size="xs"/>    
    else ()}
    </a></li>
    }
    </ul>
    
    </div>
    }
    </div>
    </div>
    <div class="tab-pane" id="moretexts" role="tabpanel">    
    
    { if (sm:is-authenticated()) then
    (: first create the tab links for sub catetories :)
    if (xmldb:collection-available($chantpath)) then (
    <ul class="nav nav-tabs" id="more-buTab" role="tablist">
    {for $b in xmldb:get-child-collections($chantpath)
    let $coll := concat($chantpath, $b)
    let $c := xmldb:get-child-resources($coll)
    order by $b
    return 
    <li class="nav-item">
    <a class="nav-link" id="{$b}-more-tab" role="tab" 
    href="#{$b}" data-toggle="tab">{map:get($app:lmap, $b)}
    <span class="badge badge-pill badge-light">{count($c)}</span></a></li>
    }
    </ul>
,    <div class="tab-content" id="more-buTabContent">
    {for $b in xmldb:get-child-collections($chantpath)
    let $coll := concat($chantpath, $b)
    return    
    <div class="tab-pane" id="{$b}" role="tabpanel">
    <ul>{
    for $title in collection($coll)//tei:titleStmt/tei:title
     let $textid := data($title/ancestor::tei:TEI/@xml:id)
     where string-length($title/text()) > 0
    return
    <li class="list-group-itemx">
    <a href="textview.html?location={$textid}">{$title/text()}
    <!--
    <input id="input-{$textid}" name="input-name" type="number" class="rating" 
    min="1" max="10" step="2" data-theme="krajee-svg" data-size="xs"/>    -->
    </a></li>    
    }</ul>
    </div>
    }
    </div>
     ) else "Additional texts are not installed."   
    else 
    "More texts available.  Login to see a list."   
    }
    
    </div>
    <div class="tab-pane" id="starredtexts" role="tabpanel">    
    Starred texts
    </div>
    
    </div>
    </div>
};

(: taxchar display :)
declare 
    %templates:wrap
function app:char($node as node()*, $model as map(*), $char as xs:string?, $id as xs:string?)
{
    (session:create(),
    let $key := replace($id, '#', '')
    let $n := if (string-length($id) > 0) then
      doc(concat($config:tls-data-root, "/core/taxchar.xml"))//tei:div[@xml:id = $id]
    else
      doc(concat($config:tls-data-root, "/core/taxchar.xml"))//tei:div[tei:head[. = $char]]
    return
    <div class="card">
    <div class="card-header">
    <h4 class="card-title">Analysis of {$n/tei:head/text()}:</h4>
    </div>
    <div class="card-text">
     {for $l in $n/tei:list return local:proc_char($l)}
    </div>
    <div class="card-footer">
    <ul class="pagination">
    {for $c in $n/preceding::tei:div[position()< 6]
    return
    <li class="page-item"><a class="page-link" href="char.html?id={$c/@xml:id}">{$c/tei:head/text()}</a></li>
    }    
    <li class="page-item disabled"><a class="page-link">&#171;</a></li>
    <li class="page-item disabled"><a class="page-link">{$n/tei:head/text()}</a></li>
    <li class="page-item disabled"><a class="page-link">&#187;</a></li>
    {for $c in $n/following::tei:div[position()< 6]
    return
    <li class="page-item"><a class="page-link" href="char.html?id={$c/@xml:id}">{$c/tei:head/text()}</a></li>
    }
    </ul>
    </div>
    </div>
)};   
   
declare function local:proc_char($node as node())
{ 
typeswitch ($node)
  case element(tei:div) return
      <div>{for $n in $node/node() return local:proc_char($n)}</div>
  case element(tei:head) return
  <h4 class="card-title">{$node/text()}</h4>
  case element(tei:list) return
  <ul >{for $n in $node/node()
       return
       local:proc_char($n)
  }</ul>
  case element(tei:item) return
    <li>{for $n in $node/node()
        return
            local:proc_char($n)
    }</li>
  case element(tei:ref) return
     let $id := substring($node/@target, 2),
     $char := tokenize($node/ancestor::tei:div[1]/tei:head/text(), "\s")[1],
     $swl := collection($config:tls-data-root)//tei:div[@xml:id=$id]//tei:entry[tei:form/tei:orth[. = $char]]//tei:sense
     return
      <span>
      <a href="concept.html?uuid={$id}" class="mr-2 ml-2">{$node/text()}</a>
      <button title="click to reveal {count($swl)} syntactic words" class="btn badge badge-light" type="button" 
      data-toggle="collapse" data-target="#{$id}-swl">{count($swl)}</button>
      <ul class="list-unstyled collapse" id="{$id}-swl"> 
      {for $sw in $swl
      return tlslib:display_sense($sw)}
      </ul>
      </span>
  case text() return
      $node
  default
  return 
  <not-handled>{$node}</not-handled>
};
   
   
   
(: concept display :)
declare 
    %templates:wrap
function app:concept($node as node()*, $model as map(*), $concept as xs:string?, $uuid as xs:string?)
{
    (session:create(),
    let $user := sm:id()//sm:real/sm:username/text()
    let $key := replace($uuid, '^#', '')
    let $c :=  if (string-length($key) > 0) then
       collection($config:tls-data-root || "/concepts")//tei:div[ends-with(@xml:id,$key)]    
     else
       collection($config:tls-data-root || "/concepts")//tei:div[tei:head[. = $concept]],
    $tr := $c//tei:list[@type="translations"]//tei:item
    return
    <div class="card">
    <div class="card-body">
    <h4 class="card-title">{$c/tei:head/text()}&#160;&#160;{for $t in $tr return 
      <span class="badge badge-light" title="{map:get($app:lmap, $t/@xml:lang)}">{$t/text()}</span>} 
      {if  ("tls-admin" = sm:get-user-groups($user)) then 
      <a target="_blank" class="float-right badge badge-pill badge-light" href="{templates:link-to-app("http://exist-db.org/apps/eXide", 
      concat("index.html?open=", document-uri(root($c))))}">Edit concept</a>
      else ()}
      </h4>
    <h5 class="card-subtitle" id="popover-test" data-toggle="popover">{$c/tei:div[@type="definition"]//tei:p/text()}</h5>
    <div id="concept-content" class="accordion">
    <div class="card">
    <div class="card-header" id="altnames-head">
      <h5 class="mb-0">
        <button class="btn" data-toggle="collapse" data-target="#altnames" >
          Alternate names
        </button>
      </h5>
      </div>
      <div id="altnames" class="collapse" data-parent="#concept-content">{for $i in $c//tei:list[@type="altnames"]/tei:item/text()
      return
      <span class="badge badge-pill badge-light">{$i}</span>
      }</div>
    </div>
    <!-- pointers -->
    <div class="card">
    <div class="card-header" id="pointers-head">
      <h5 class="mb-0 mt-2">
        <button class="btn" data-toggle="collapse" data-target="#pointers" >
          Pointers
        </button>
      </h5>
      </div>
     <div id="pointers" class="collapse" data-parent="#concept-content">
     {for $p in $c//tei:div[@type="pointers"]//tei:list
     return
     (<h5 class="ml-2">{map:get($app:lmap, data($p/@type))}{tlslib:capitalize-first(data($p/@type/text()))}</h5>,
     <p>{for $r in $p//tei:ref return
     <span class="badge badge-light"><a href="concept.html?uuid={replace($r/@target, "#", "")}">{$r/text()}</a></span>
     }
     
     </p>)}
     </div>
    </div>
    <!-- notes -->
    <div class="card">
    <div class="card-header" id="notes-head">
      <h5 class="mb-0 mt-2">
        <button class="btn" data-toggle="collapse" data-target="#notes" >
          Notes
        </button>
      </h5>
      </div>
     <div id="notes" class="collapse" data-parent="#concept-content">
     {for $d in $c//tei:div[@type="notes"]//tei:div
     return
     (<h5 class="ml-2 mt-2">{map:get($app:lmap, data($d/@type))}</h5>,
     <div>{for $p in $d//tei:p return
     <p>{$p}</p>
     }     
     </div>)}
     </div>
    </div>
    <!-- bibl -->
    <div class="card">
    <div class="card-header" id="bibl-head">
      <h5 class="mb-0 mt-2">
        <button class="btn" data-toggle="collapse" data-target="#bibl" >
          Source references
        </button>
      </h5>
      </div>
     <div id="bibl" class="collapse" data-parent="#concept-content">
     {for $d in $c//tei:div[@type="source-references"]//tei:bibl
     return
     $d
     }     
     </div>
    </div>
    
    <!-- -->
    </div>
    </div>
    <div id="word-content" class="card">
    <div class="card-body">
    <h4 class="card-title">Words</h4>
    <p class="card-text">
    {for $e in $c/tei:div[@type="words"]//tei:entry
    let $zi := string-join($e/tei:form/tei:orth, " / ")
    ,$pr := $e/tei:form/tei:pron
    ,$def := $e/tei:def/text()
    order by $zi[1]
(:    count $count :)
    return 
    <div><h5>{$zi}&#160;&#160; {for $p in $pr return <span>{
    if (ends-with($p/@xml:lang, "oc")) then "OC: " else 
    if (ends-with($p/@xml:lang, "mc")) then "MC: " else (),
    $p/text()}&#160;</span>}</h5>
    {if ($def) then <p class="ml-4">{$def}</p> else ()}
    <ul>{for $sw in $e//tei:sense
    return
    tlslib:display_sense($sw)
    }</ul>
    </div>
    }
    </p>
    </div>
    </div>
    </div>
    )
};


(: get words for new ann :)

declare 
    %templates:wrap
function app:get_sw($node as node()*, $model as map(*), $word as xs:string?)
{
for $w in tlslib:getwords($word, $model)
return $w
};

(: login :)
declare 
    %templates:wrap
function app:login($node as node()*, $model as map(*))
{ if (sm:is-authenticated()) then 
<a href="#" class="btn btn-default navbar-btn" data-toggle="modal" data-target="#settingsDialog">
<img class="icon mr-2" 
src="resources/icons/open-iconic-master/svg/person.svg"/>{sm:id()//sm:real/sm:username/text()}</a>
else
<a href="#" class="btn btn-default navbar-btn" data-toggle="modal" data-target="#loginDialog">
<img class="icon icon-account-login mr-2" 
src="resources/icons/open-iconic-master/svg/account-login.svg"/>Login</a>
};

(: dialog functions :)
declare
    %templates:wrap
function app:swl-form-dialog($node as node()*, $model as map(*)){
<div id="swl-form" class="card ann-dialog overflow-auto">
<div class="card-body">
    <h5 class="card-title">{if (sm:is-authenticated()) then "New Attribution:" else "Existing SW for " }<strong class="ml-2"><span id="swl-query-span">Word or char to annotate</span>:</strong>
     <button type="button" class="close" onclick="hide_new_att()" aria-label="Close">
       &#215;
     </button>
</h5>
    <h6 class="text-muted">At:  <span id="swl-line-id-span" class="ml-2">Id of line</span></h6>
    <h6 class="text-muted">Line: <span id="swl-line-text-span" class="ml-2">Text of line</span></h6>
    <div class="card-text">
       
        <p> { if (sm:is-authenticated()) then <span>
        <span class="badge badge-primary">Use</span> one of the following syntactic words (SW), 
        create a <span class="mb-2 badge badge-secondary">New SW</span> 
         or add a new concept to the word here: 
         <span class="btn badge badge-light ml-2" data-toggle="modal" onclick="show_new_concept()">Concept</span> 
         </span>
         else <span>Log in if you want to add attribution.</span>
         }
        <ul id="swl-select" class="list-unstyled"></ul>
        </p>
      </div>
    </div>    
    </div>
};

declare
    %templates:wrap
    %templates:default("type", "concept")
function app:add-concept-dialog($node as node()*, $model as map(*), $type as xs:string){
<div id="new-{$type}" class="modal" tabindex="-1" role="dialog" style="display: none;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                {if ($type = "concept") then
                <h5 class="modal-title">Adding concept for <strong class="ml-2"><span id="{$type}-query-span">Word</span></strong>
                    <button class="btn badge badge-primary ml-2" type="button" onclick="get_guangyun()">
                        廣韻
                    </button>
                </h5>
                else 
                <h5 class="modal-title">Adding SW to concept <strong class="ml-2"><span id="{$type}-query-span">Concept</span></strong></h5>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    ×
                </button>
            </div>
            <div class="modal-body">
                {if ($type = "concept") then
                (<h6 class="text-muted">At:  <span id="concept-line-id-span" class="ml-2">Id of line</span></h6>,
                <h6 class="text-muted">Line: <span id="concept-line-text-span" class="ml-2">Text of line</span></h6>
                ) else () }
                <div>
                   {if ($type = "concept") then
                    <span id="concept-id-span" style="display:none;"/>
                    else 
                    <span id="word-id-span" style="display:none;"/>
                    }
                    <span id="synfunc-id-span-{$type}" style="display:none;"/>
                    <span id="semfeat-id-span-{$type}" style="display:none;"/>
                    
                </div>
                   {if ($type = "concept") then (
                <div class="form-group" id="guangyun-group">
                    <span class="text-muted" id="guangyun-group-pl"> Press the 廣韻 button above and select the pronounciation</span>
                </div>,
                <div id="select-concept-group" class="form-group ui-widget">
                    <label for="select-concept">Concept: </label>
                    <input id="select-concept" class="form-control" required="true"/>
                </div>)
                    else ()}                
                <div class="form-row">
                <div id="select-synfunc-group-{$type}" class="form-group ui-widget col-md-6">
                    <label for="select-synfunc-{$type}">Syntactic function: </label>
                    <input id="select-synfunc-{$type}" class="form-control" required="true"/>
                </div>
                <div id="select-semfeat-group-{$type}" class="form-group ui-widget col-md-6">
                    <label for="select-semfeat-{$type}">Semantic feature: </label>
                    <input id="select-semfeat-{$type}" class="form-control"/>
                </div>
                </div>
                <div id="input-def-group-{$type}">
                    <label for="input-{$type}-def">Definition </label>
                    <textarea id="input-{$type}-def" class="form-control"></textarea>                   
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                   {if ($type = "concept") then 
                <button type="button" class="btn btn-primary" onclick="save_to_concept()">Save changes</button>
                else
                <button type="button" class="btn btn-primary" onclick="save_newsw()">Save SW</button>
                }
            </div>
        </div>
    </div>    
    <!-- temp -->
    
</div>    
};


declare
    %templates:wrap
function app:main-navbar($node as node()*, $model as map(*))
{
<nav class="navbar navbar-expand-sm navbar-light bg-light fixed-top">
                <span class="banner-icon">
                {app:logo($node, $model)}
                </span>
                <a class="navbar-brand ml-2" href="index.html">{$config:app-title}</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"/>
                </button>
                
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav mr-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Browse
                            </a>
                            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <a class="dropdown-item" href="browse.html?type=concept">Concepts</a>
                                <a class="dropdown-item" href="browse.html?type=taxchar">Characters</a>
                                <a class="dropdown-item" href="browse.html?type=word">Words</a>
                                <a class="dropdown-item" href="browse.html?type=syn-func">Syntactical functions</a>
                                <a class="dropdown-item" href="browse.html?type=sem-feat">Semantical features</a>
                                <div class="dropdown-divider"/>
                                <a class="dropdown-item" href="textlist.html">Texts</a>
                            </div>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownDoc" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Documentation
                            </a>
                            <div class="dropdown-menu" aria-labelledby="navbarDropdownDoc">
                                <a class="dropdown-item" href="documentation.html?section=overview">Overview</a>
                                <a class="dropdown-item" href="#">Another action</a>
                                <div class="dropdown-divider"/>
                                <a class="dropdown-item" href="#">About this website</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Link</a>
                        </li>
                        <!--
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Dropdown
                            </a>
                            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <a class="dropdown-item" href="#">Action</a>
                                <a class="dropdown-item" href="#">Another action</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#">Something else here</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>
                        </li>
                        -->
                    </ul>
                    <form action="search.html" class="form-inline my-2 my-lg-0" method="get">
                        <input id="query-inp" name="query" class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search"/>
                        <button class="btn btn-outline-success my-2 my-sm-0" type="submit">
                            <img class="icon" src="resources/icons/open-iconic-master/svg/magnifying-glass.svg"/>
                        </button>
                    </form>
                    <!--
                    <div class="btn-nav">
                        <a href="#" class="btn btn-default navbar-btn" data-toggle="modal" data-target="#searchDialog">Advanced Search</a>
                    </div>
                    -->
                    <div class="btn-nav">
                        {app:login($node, $model)}
                    </div>
                </div>
            </nav>
};

declare
    %templates:wrap
function app:tv-navbar($node as node()*, $model as map(*))
{
<nav class="navbar navbar-expand-md navbar-light bg-light fixed-top">
                <a href="index.html"><span class="banner-icon">
                {app:logo($node, $model)}
                </span></a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"/>
                </button>                
                <a class="navbar-brand" href="#" id="mainDropdown"  data-toggle="xdropdown" >TLS</a>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav mr-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Browse
                            </a>
                            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <a class="dropdown-item" href="browse.html?type=concept">Concepts</a>
                                <a class="dropdown-item" href="browse.html?type=taxchar">Characters</a>
                                <a class="dropdown-item" href="browse.html?type=word">Words</a>
                                <a class="dropdown-item" href="browse.html?type=syn-func">Syntactical functions</a>
                                <a class="dropdown-item" href="browse.html?type=sem-feat">Semantical features</a>
                                <div class="dropdown-divider"/>
                                <a class="dropdown-item" href="textlist.html">Texts</a>
                            </div>
                        </li>
                        {tlslib:tv-header($node, $model)}
                        <!--
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownDoc" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Documentation
                            </a>
                            <div class="dropdown-menu" aria-labelledby="navbarDropdownDoc">
                                <a class="dropdown-item" href="documentation.html?section=overview">Overview</a>
                                <a class="dropdown-item" href="#">Another action</a>
                                <div class="dropdown-divider"/>
                                <a class="dropdown-item" href="#">About this website</a>
                            </div>
                        </li>
                        -->
                    </ul>
                    
                </div>
                    <form action="search.html" class="form-inline my-2 my-lg-0" method="get">
                        <input name="query" class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search"/>
                        <button class="btn btn-outline-success my-2 my-sm-0" type="submit">
                            <img class="icon" src="resources/icons/open-iconic-master/svg/magnifying-glass.svg"/>
                        </button>
                    </form>
                <div class="btn-nav">
                        {app:login($node, $model)}
                </div>
   
            </nav>
};

declare
    %templates:wrap
function app:footer($node as node()*, $model as map(*)){
            <div class="container">
                <span id="copyright"/>
                    <p>Copyright TLS Project 2019</p>
                <p>Support by <strong>Princeton 
                    University Dean for Research</strong>, 
                    <strong>Department of East Asian Studies - Princeton University</strong>,
                    <strong>Heidelberg University - Cluster of Excellence - Asia and Europe in a Global Context</strong>
                    and <strong>IKOS - University of Oslo</strong>
                    gratefully acknowledged.
                </p>
                <p class="small text-right">This site uses cookies to maintain login state. The cookies are not used for any other purposes. By using this site you agree to this.</p>
            </div>

};

declare
    %templates:wrap
function app:page-title($node as node()*, $model as map(*))
{ (: the html file accessed, without the extension :) 
let $context := substring-before(tokenize(request:get-uri(), "/")[last()], ".html")
return concat ("TLS: ", $context)
};

declare function app:recent-activity(){
  let $userref := concat('#', sm:id()//sm:username/text())
  for $r in collection($config:tls-data-root)//*/@tls:resp=$userref
  return $r
};


declare
    %templates:wrap
function app:settings($node as node()*, $model as map(*))
{
<div class="modal-dialog" style="z-index: 1080;" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Settings for user {sm:id()//sm:username/text()}</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    </div>
                    <form id="settings-form" class="form form-horizontal" method="get">
                        <div class="modal-body">
                        <p>Recent Activity</p>
                        <ul class="list-unstyled">
                        <!-- app:recent-activity() -->
                        </ul>
                        </div>
                        <div class="modal-footer">
                            <button onclick="logout()" class="btn btn-danger">Logout</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </form>
                </div>
            </div>
};

declare
    %templates:wrap
function app:dialogs($node as node()*, $model as map(*))
{<div>
        <div id="loginDialog" class="modal" tabindex="-1" role="dialog" style="display: none;">
            <p>Login</p>
            <div class="modal-dialog" style="z-index: 1080;" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Login</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    </div>
                    <form id="login-form" class="form form-horizontal" method="post">
                        <div class="modal-body">
                            <div class="form-group">
                                <label class="control-label col-sm-2">User:</label>
                                <div class="col-sm-10">
                                    <input type="text" name="user" class="form-control"/>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-2">Password:</label>
                                <div class="col-sm-10">
                                    <input type="password" name="password" class="form-control"/>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                        <input type="hidden" name="duration" value="P7D"/>
                    </form>
                </div>
            </div>
        </div>
        <div id="settingsDialog" class="modal" tabindex="-1" role="dialog" style="display: none;">
        {app:settings($node, $model)}
        </div>
        <div id="remoteDialog"/>
   </div>
};