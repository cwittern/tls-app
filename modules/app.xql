xquery version "3.1";

module namespace app="http://hxwd.org/app";

declare namespace tei= "http://www.tei-c.org/ns/1.0";
declare namespace tls="http://hxwd.org/ns/1.0";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://hxwd.org/config" at "config.xqm";
import module namespace kwic="http://exist-db.org/xquery/kwic"
    at "resource:org/exist/xquery/lib/kwic.xql";
import module namespace tlslib="http://hxwd.org/lib" at "tlslib.xql";

declare variable $app:SESSION := "tls:results";


(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

(: start here :)
(:~
 : Get app logo. Value passed from repo-config.xml  
:)
declare
    %templates:wrap
function app:logo($node as node(), $model as map(*)) {
    if($config:get-config//repo:logo != '') then
        <img class="app-logo img-fluid" src="{$config:nav-base || '/resources/images/' || $config:get-config//repo:logo/text() }" title="{$config:app-title}"/>
    else ()
};



declare function app:tls-summary($node as node(), $model as map(*)) {
(:let $tlsroot := $config:tls-data-root :)
<div>
{let $tlsroot := $config:tls-data-root
return
<p>
Dummy template {local-name($node), string($node), string($tlsroot), count(collection($tlsroot)//*:head)}
<table>
{for $a in collection($tlsroot)//tei:head
group by $key := $a/ancestor::tei:div/@type
order by $key
return
  <tr>
  <td>Key: {data($key)}</td>
  <td>Count: {count($a)}</td>
</tr>
}
</table>
</p>}
</div>
};

(: browse :)

declare 
    %templates:wrap
function app:browse($node as node()*, $model as map(*), $type as xs:string?, $filter as xs:string?)
{
    session:create(),
    let $filterString := if (string-length($filter) > 0) then $filter else ""    
    let $hits := if (("concept", "syn-func", "sem-feat") = $type) 
      then app:do-browse($type, $filterString)
      else if ($type = "word") then app:browse-word($type, $filterString)
      else app:browse-char($type, $filter)
    let $store := session:set-attribute("tls-browse", $hits)
    return
       map:entry("browse", $hits)
};

(: :)
declare function app:browse-word($type as xs:string?, $filter as xs:string?)
{
};

(: taxchar if available, otherwise look for words? :)
declare function app:browse-char($type as xs:string?, $filter as xs:string?)
{
};

declare function app:do-browse($type as xs:string?, $filter as xs:string?)
{
    for $hit in collection($config:tls-data-root)//tei:div[@type=$type]
    let $head := data($hit/tei:head)
    where starts-with($head, $filter)
    order by $head
    return $hit
};



(: search related functions :)

declare 
    %templates:wrap
function app:query($node as node()*, $model as map(*), $query as xs:string?, $mode as xs:string?)
{
    session:create(),
    let $hits := app:do-query($query, $mode)
    let $store := session:set-attribute($app:SESSION, $hits)
    return
       map:entry("hits", $hits)
};

declare function app:do-query($queryStr as xs:string?, $mode as xs:string?)
{
    let $query := app:create-query($queryStr, $mode)
    let $dataroot := $config:tls-data-root   (: config:tls-data-root :)
    for $hit in collection($dataroot)//tei:div[ft:query(., $query)]
    order by ft:score($hit) descending
    return $hit
};

declare
    %templates:wrap
function app:from-session($node as node()*, $model as map(*)) {
    map:entry("hits", session:get-attribute($app:SESSION))
};



declare function app:create-query($queryStr as xs:string?, $mode as xs:string?)
{
<query>
    {
    if ($mode eq 'any') then 
        for $term in tokenize($queryStr, '\s')
        return
        <term occur="should">{$term}</term>
    else if ($mode eq 'all') then
        for $term in tokenize($queryStr, '\s')
        return
        <term occur="must">{$term}</term>
    else if ($mode eq 'phrase') then
        <phrase>{$queryStr}</phrase>
    else 
        <near>{$queryStr}</near>
    }
</query>
};

declare 
    %templates:default("start", 1)
    function app:show-hits($node as node()*, $model as map(*),$start as xs:int)
{
    for $hit at $p in subsequence($model("hits"), $start, 10)
    let $kwic := kwic:summarize($hit, <config width="40" table="yes"/>, app:filter#2)
    return
    <div class="tls-concept" xmlns="http://www.w3.org/1999/xhtml">
      <h3>{$hit/ancestor::tei:head/text()}</h3>
      <span class="number">{$start + $p - 1}</span>
      <table>{ $kwic }</table>
    </div>
};    


(:

declare
    %templates:default("start", 1)
    %templates:default("length", 10)
    function app:show-hits($node as node()*, $model as map()*,$start as xs:int, $length as xs:int)
{
    for $hit at $p in subsequence($model("hits"), $start, $length)
    let $kwic := kwic:summarize($hit, <config width="40" table="yes"/>, app:filter#2)
    return
    <div class="tls-concept" xmlns="http://www.w3.org/1999/xhtml">
      <h3>{$hit/ancestor::tei:head/text()}</h3>
      <span class="number">{$start + $p - 1}</span>
      <table>{ $kwic }</table>
    </div>
};
:)
declare %private function app:filter($node as node(), $mode as xs:string?) as text()?
{
    if ($mode eq 'before') then 
    text {concat($node, ' ') }
    else 
    text {concat(' ', $node) }
};

(: temporarily added the search code here to see if the search is working at all
 this should just be count($model("hits"))
:)
declare
    %templates:wrap
function app:hit-count($node as node()*, $model as map(*), $query as xs:string?) {
   count($model("hits"))
};

(: textview related functions :)

(: function textview 
@param location  text location or text id for the text to display. If empty, display text list
@param mode      for textlist: 'tls' texts or 'chant' texts or 'all' texts
:)
declare 
    %templates:wrap
    %templates:default("prec", 0)
    %templates:default("foll", 50)     
function app:textview($node as node()*, $model as map(*), $location as xs:string?, $mode as xs:string?, $prec as xs:int?, $foll as xs:int?)
{
    let $dataroot := $config:tls-data-root
    return
    (session:create(),
    if (string-length($location) > 0) then
     if (contains($location, '_')) then
      let $textid := tokenize($location, '_')[1]
      let $firstseg := collection($config:tls-texts-root)//tei:*[@xml:id=$location]
      return
        tlslib:displaychunk($firstseg, $prec, $foll)
     else
      let $firstdiv := (collection($config:tls-texts-root)//tei:*[@xml:id=$location]//tei:body/tei:div[1])
      let $targetseg := ($firstdiv//tei:seg)[1]
      return
       tlslib:displaychunk($targetseg, $prec, $foll)
    else 
    let $titles := for $t in collection(concat($config:tls-texts-root, '/tls'))//tei:titleStmt/tei:title
            let $textid := data($t/ancestor::tei:TEI/@xml:id)
            where not (contains($textid, "-en"))
            return $t
    return
    <div>
    <h1>Available annotated texts: ({count($titles)})</h1>
    <ul>
    {
    for $title in $titles
    let $textid := data($title/ancestor::tei:TEI/@xml:id)
    order by $textid
    return 
    <li><a href="?location={$textid}">{$textid, $title/text()}</a></li>
    }
    </ul>
    </div>
    )
};

(: concept display :)
declare 
    %templates:wrap
function app:concept($node as node()*, $model as map(*), $user as xs:string?, $mode as xs:string?)
{
    session:create()
};





